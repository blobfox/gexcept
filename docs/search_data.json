{"items":[{"type":"page","parentTitle":"gexcept","title":"gexcept","doc":"# gexcept\n\nEver wanted to use exceptions in Gleam? Now you can!\n\n`gexcept` is a gleam library that provides exception handling in Gleam. It is build to be as generic as\npossible as to not interfer with any existing type systems. It works for both Erlang and JavaScript targets.\n\n## Installation\n\nTo add `gexecpt` to your project, use the following command.\n\n```sh\ngleam add gexcept\n```\n\n## Usage\n\nThe library provides two primary functions:\n\n- `throw()` to throw an exception, and\n- `try()` for catching and handling them.\n\nAdditionally, it includes functions for dealing with `Result` and `Option` instances. For more details, please \nrefer to the documentation.\n\nHere&#39;s a basic example - you can find some more in `test/gexcept_test.gleam`.\n\n```gleam\nimport gexcept\nimport gleam/io\n\npub fn main() {\n  gexcept.try(\n    fn() {\n      gexpect.throw(&quot;exception&quot;)\n\n      &quot;return value&quot;\n    },\n    fn(exception) {\n      &quot;caught: &quot; &lt;&gt; exception\n    }\n  )\n  |&gt; io.println\n}\n```\n\nFor further documentation see [/docs](/docs).\n\n## Q&amp;A\n\n### Should I use this?\n![steve carell noo meme gif](https://github.com/blobfox/gexcept/raw/main/assets/steve-carell-nooo.gif?raw=true)\n\n### Why did you make this?\nBecause it is possible.\n\n### Why shouldn&#39;t I use this?\nIt undermines the core design principles of Gleam.\n\nBuilding exceptions into your project will cause you more problems than it will solve (if it solves any problems \nat all).\n\nSo, please, never ever use this package.\n\n## Further Notes\n\nThe exceptions themselves are not type-checked, and there is no easy way to achive that.\n\nCalling `throw()` without a surrounding `try()`-call will probably crash the program, but I consider this\nundefined behaviour.\n\n## Development\n\nYou can run the test suite using these commands.\n\n```sh\ngleam test --target=erlang\ngleam test --target=javascript\n```\n","ref":"index.html"},{"type":"function","parentTitle":"gexcept","title":"throw","doc":"pub fn throw(exception: a) -&gt; Nil\n For throwing exceptions\n \n Calling `throw` will stop the executing of the current function. The control flow resumes in the `catch_callback`\n of the next `try` call in the call stack.\n \n Note: The exception type is not checked.\nSynonyms:\ngexcept.throw\ngexcept throw","ref":"gexcept.html#throw"},{"type":"function","parentTitle":"gexcept","title":"try","doc":"pub fn try(\n  try_callback: fn() -&gt; a,\n  catch_callback: fn(b) -&gt; a,\n) -&gt; a\n For handling exceptions\n \n The `try_callback` will be executed immediately. Its return value is also returned from `try`.\n Only in case `try_callback` calls `throw` the `catch_callback` will be called. Its argument is the argument\n of `throw`. `try` will then return whatever `catch_callback` returns.\n \n Note: The exception type is not checked.\nSynonyms:\ngexcept.try\ngexcept try","ref":"gexcept.html#try"},{"type":"function","parentTitle":"gexcept","title":"unwrap_option_or_throw","doc":"pub fn unwrap_option_or_throw(\n  to_unwrap: Option(a),\n  exception: b,\n) -&gt; a\n For unwrapping options\n \n This function will return the Some-value of its parameter. In case the parameter is None, `exception` argument\n wil be thrown.\nSynonyms:\ngexcept.unwrap_option_or_throw\ngexcept unwrap_option_or_throw","ref":"gexcept.html#unwrap_option_or_throw"},{"type":"function","parentTitle":"gexcept","title":"unwrap_or_throw","doc":"pub fn unwrap_or_throw(to_unwrap: Result(a, b)) -&gt; a\n For unwrapping results\n \n This function will return the Ok-value of its parameter. In case the parameter is an Error, the argument of\n the werror will be thrown instead.\nSynonyms:\ngexcept.unwrap_or_throw\ngexcept unwrap_or_throw","ref":"gexcept.html#unwrap_or_throw"},{"type":"module","parentTitle":"gexcept","title":"gexcept","doc":" This modul provides support for exceptions in Gleam for both Erlang and Javascript targets.","ref":"gexcept.html"}],"proglang":"gleam"}